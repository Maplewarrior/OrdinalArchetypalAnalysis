Traceback (most recent call last):
  File "get_results.py", line 36, in <module>
    get_all_results()
  File "get_results.py", line 31, in get_all_results
    result_helper_function(params)
  File "/zhome/2e/5/156001/AAM-Module-V3-main/result_helper_function.py", line 77, in result_helper_function
    AAM.analyse(model_type=AA_type, lr=lr, with_synthetic_data = True, mute=True, K=analysis_arch, n_iter = n_iter, with_hot_start=True, p=p, beta_regulators=beta_regulators, alternating=alternating)
  File "/zhome/2e/5/156001/AAM-Module-V3-main/AAM.py", line 123, in analyse
    self._synthetic_results["RBOAA"].insert(0,self._RBOAA._compute_archetypes(self._synthetic_data.X, K, p, n_iter, lr, mute, self._synthetic_data.columns,with_synthetic_data=True,early_stopping=early_stopping,with_OAA_initialization = with_hot_start,alternating=alternating,beta_regulators=beta_regulators,backup_itterations=itteration_backup))
  File "/zhome/2e/5/156001/AAM-Module-V3-main/RBOAA_class.py", line 163, in _compute_archetypes
    optimizer, A_non_constraint, B_non_constraint, b_non_constraint, sigma_non_constraint, c1_non_constraint, c2 = self._compute_archetypes(X, K, p, n_iter, lr, mute, columns, early_stopping = early_stopping, backup_itterations=backup_itterations, with_OAA_initialization=with_OAA_initialization, for_hotstart_usage=True, alternating=False, hotstart_alternating=alternating, beta_regulators=beta_regulators)
  File "/zhome/2e/5/156001/AAM-Module-V3-main/RBOAA_class.py", line 224, in _compute_archetypes
    L = self._error(Xt,A_non_constraint,B_non_constraint,b_non_constraint,sigma_non_constraint,c1_non_constraint,c2,for_hotstart_usage,beta_regulators)
  File "/zhome/2e/5/156001/AAM-Module-V3-main/RBOAA_class.py", line 136, in _error
    loss = self._calculate_loss(Xt,X_hat,b,sigma)
  File "/zhome/2e/5/156001/AAM-Module-V3-main/RBOAA_class.py", line 121, in _calculate_loss
    P_next = torch.distributions.normal.Normal(0, 1).cdf(z_next)
  File "/zhome/2e/5/156001/env/lib64/python3.6/site-packages/torch/distributions/normal.py", line 81, in cdf
    self._validate_sample(value)
  File "/zhome/2e/5/156001/env/lib64/python3.6/site-packages/torch/distributions/distribution.py", line 289, in _validate_sample
    "Expected value argument "
ValueError: Expected value argument (Tensor of shape (10000, 21)) to be within the support (Real()) of the distribution Normal(loc: 0.0, scale: 1.0), but found invalid values:
tensor([[nan, nan, nan,  ..., nan, nan, nan],
        [nan, nan, nan,  ..., nan, nan, nan],
        [nan, nan, nan,  ..., nan, nan, nan],
        ...,
        [nan, nan, nan,  ..., nan, nan, nan],
        [nan, nan, nan,  ..., nan, nan, nan],
        [nan, nan, nan,  ..., nan, nan, nan]], grad_fn=<IndexPutBackward0>)